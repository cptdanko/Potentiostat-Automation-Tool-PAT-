/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Metadata.java
 *
 * Created on Jun 3, 2012, 5:04:30 PM
 */
package pat;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JTextField;
import org.jdesktop.application.Action;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import javax.swing.ActionMap;
import org.jdesktop.application.Application;
/**
 *
 * @author bsoni
 */
public class Metadata extends javax.swing.JDialog {
    
    public void setPatView(PATView view)
    {
        this.vw = view;
    }
    public List<String> getExistingConfig()
    {
        List<String> existingMD = new ArrayList<String>();
        try
        {
            if(configFile.exists())
            {
                BufferedReader reader = new BufferedReader(new FileReader(configFile));
                String line;
                int mdCounter=0;
                while((line =reader.readLine()) !=null)
                {
                    if(mdCounter >4){break;}
                    existingMD.add(line);
                    mdCounter++;
                    
                }
                reader.close();
            }
        }catch(IOException io)
        {
            this.vw.log.info(io.getMessage());
        }
        return existingMD;
    }
    public final void populateInitialMetaData()
    {
        List<String> existingMDFields = getExistingConfig();
        if(existingMDFields.size() >0)
        {
            
            for(String mdText:existingMDFields)
            {
                this.lastY+=30;
                JTextField field = new JTextField(15);
                this.getContentPane().add(field,new AbsoluteConstraints(this.lastX, this.lastY, -1, -1));
                field.setText(mdText);
                this.textFieldCollection.add(field);
            }
        }
    }
    public Metadata(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        ActionMap actionMap = Application.getInstance(pat.PATApp.class).getContext().getActionMap(Metadata.class, this);
        
        textFieldCollection =  new ArrayList<JTextField>();
        this.lastX = 5;
        this.lastY = 10;

        JButton addFields = new JButton();
        addFields.setAction(actionMap.get("addMetadata"));
        addFields.setText("Add metadata");
        this.lastY +=30;
        this.getContentPane().add(addFields,new AbsoluteConstraints(this.lastX, this.lastY, -1, -1));
        
        JButton finished = new JButton();
        finished.setAction(actionMap.get("addOperationFinished"));
        finished.setText("Done");
        this.getContentPane().add(finished,new AbsoluteConstraints(this.lastX+130, this.lastY, -1, -1));
        
        populateInitialMetaData();
        pack();
    }
    @Action
    public void addMetadata()
    {
        if(this.textFieldCollection.size()>4)
        {
            return;
        }
        else
        {
            this.lastY+=30;
            JTextField field = new JTextField(15);
            this.getContentPane().add(field,new AbsoluteConstraints(this.lastX, this.lastY, -1, -1));
            textFieldCollection.add(field);
            pack();
        }
           
    }
    public final void writeMD()
    {
        try{
            BufferedWriter writer = new BufferedWriter(new FileWriter(configFile));

            for(JTextField field:this.textFieldCollection)
            {
                String text = field.getText();
                writer.write(text);
                writer.newLine();
            }
            writer.close();
        }catch(IOException io)
        {
            this.vw.log.info(io.getMessage());
        }
    }
    @Action
    public void addOperationFinished()
    {
        writeMD();
        this.vw.changeMetadata(textFieldCollection);
        this.dispose();
        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(pat.PATApp.class).getContext().getResourceMap(Metadata.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setForeground(resourceMap.getColor("Form.foreground")); // NOI18N
        setName("Form"); // NOI18N
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 370, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Metadata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Metadata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Metadata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Metadata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Metadata dialog = new Metadata(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    private ArrayList<JTextField> textFieldCollection;
    private int lastX,lastY;
    private PATView vw;
    private String mdConfigName ="metadata.config";
    private final File configFile = new File(mdConfigName);
    
}
